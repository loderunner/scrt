name: Publish scrt

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: scrt get DOCKERHUB_USERNAME
        id: scrt-dockerhub-username
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: DOCKERHUB_USERNAME
      - name: scrt get DOCKERHUB_TOKEN
        id: scrt-dockerhub-token
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: DOCKERHUB_TOKEN
      - name: scrt get GPG_KEY
        id: scrt-gpg-key
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: GPG_KEY
      - name: scrt get PUBLISH_GITHUB_TOKEN
        id: scrt-publish-github-token
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: PUBLISH_GITHUB_TOKEN
      - name: scrt get NFPM_LINUX_PACKAGES_PASSPHRASE
        id: scrt-nfpm-linux-packages-passphrase
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: NFPM_LINUX_PACKAGES_PASSPHRASE
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.scrt-dockerhub-username.outputs.secret }}
          password: ${{ steps.scrt-dockerhub-token.outputs.secret }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Create key file
        run: 'echo "${{ steps.gpg-key.outputs.secret }}" > key.gpg'
      - name: Create release notes
        run: sed -n "/^## ${GITHUB_REF_NAME:1}/,/^##[^#]/p" CHANGELOG.md | sed '$d' > release_notes.md
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --rm-dist --release-notes=release_notes.md
        env:
          GITHUB_TOKEN: ${{ steps.scrt-publish-github-token.outputs.secret }}
          NFPM_LINUX_PACKAGES_PASSPHRASE: ${{ steps.scrt-nfpm-linux-packages-passphrase.outputs.secret }}
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  publish-apt:
    runs-on: ubuntu-latest
    permissions: {}
    needs:
      - release
    steps:
      - name: scrt get GPG_KEY
        id: scrt-gpg-key
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: GPG_KEY
      - name: scrt get PUBLISH_GITHUB_TOKEN
        id: scrt-publish-github-token
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: PUBLISH_GITHUB_TOKEN
      - name: scrt get NFPM_LINUX_PACKAGES_PASSPHRASE
        id: scrt-nfpm-linux-packages-passphrase
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: NFPM_LINUX_PACKAGES_PASSPHRASE
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tools
        run: sudo apt update && sudo apt install -y git gnupg apt-utils dpkg-dev
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Create key file
        run: 'echo "${{ steps.gpg-key.outputs.secret }}" > key.gpg'
      - name: Publish to apt repository
        run: .scripts/publish_apt
        env:
          KEY_FILE: key.gpg
          PASSPHRASE: ${{ steps.scrt-nfpm-linux-packages-passphrase.outputs.secret }}
          GITHUB_TOKEN: ${{ steps.scrt-publish-github-token.outputs.secret }}
          APT_REPOSITORY: loderunner/scrt-apt
          DEST_DIR: ${{ runner.temp }}/scrt-apt
          SIG_EMAIL: scrt@scrt.run
          GIT_AUTHOR_NAME: 'Charles Francoise'
          GIT_AUTHOR_EMAIL: scrt@scrt.run
          GIT_COMMITTER_NAME: 'Charles Francoise'
          GIT_COMMITTER_EMAIL: scrt@scrt.run

  publish-yum:
    runs-on: ubuntu-18.04 # createrepo is missing in Ubuntu 20.04 / restored in 22
    permissions: {}
    needs:
      - release
    steps:
      - name: scrt get GPG_KEY
        id: scrt-gpg-key
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: GPG_KEY
      - name: scrt get PUBLISH_GITHUB_TOKEN
        id: scrt-publish-github-token
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: PUBLISH_GITHUB_TOKEN
      - name: scrt get NFPM_LINUX_PACKAGES_PASSPHRASE
        id: scrt-nfpm-linux-packages-passphrase
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: NFPM_LINUX_PACKAGES_PASSPHRASE
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tools
        run: sudo apt update && sudo apt install -y git gnupg createrepo
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Create key file
        run: 'echo "${{ steps.gpg-key.outputs.secret }}" > key.gpg'
      - name: Publish to yum repository
        run: .scripts/publish_yum
        env:
          KEY_FILE: key.gpg
          PASSPHRASE: ${{ steps.scrt-nfpm-linux-packages-passphrase.outputs.secret }}
          GITHUB_TOKEN: ${{ steps.scrt-publish-github-token.outputs.secret }}
          YUM_REPOSITORY: loderunner/scrt-yum
          DEST_DIR: ${{ runner.temp }}/scrt-yum
          SIG_EMAIL: scrt@scrt.run
          GIT_AUTHOR_NAME: 'Charles Francoise'
          GIT_AUTHOR_EMAIL: scrt@scrt.run
          GIT_COMMITTER_NAME: 'Charles Francoise'
          GIT_COMMITTER_EMAIL: scrt@scrt.run

  dockerhub-description:
    runs-on: ubuntu-latest
    permissions: {}
    needs:
      - release
    steps:
      - name: scrt get DOCKERHUB_USERNAME
        id: scrt-dockerhub-username
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: DOCKERHUB_USERNAME
      - name: scrt get DOCKERHUB_TOKEN
        id: scrt-dockerhub-token
        uses: ./.github/actions/scrt
        with:
          password: ${{ secrets.SCRT_PASSWORD }}
          key: DOCKERHUB_TOKEN
      - name: Checkout
        uses: actions/checkout@v3
      - name: Push description to Docker Hub
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ steps.scrt-dockerhub-username.outputs.secret }}
          password: ${{ steps.scrt-dockerhub-password.outputs.secret }}
          repository: loderunner/scrt
          readme-filepath: ./DOCKER.md

  publish-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: ./.github/actions/setup
      - name: Build static website
        working-directory: docs
        run: npm run build
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'
          path: 'gh-pages'
      - name: Rsync built pages
        run: rsync -avh --delete --exclude CNAME docs/.vuepress/dist/ gh-pages/docs/
      - name: Push website to Github
        working-directory: 'gh-pages'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add .
          git commit -m "Update documentation"
          git push
